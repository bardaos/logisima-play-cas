<h1>LogiSima Play Cas Authentification</h1>
<p>
  This module allows you to set up an authentication with a <a href="http://www.jasig.org/cas">CAS server</a> and to managed authorization. It is based on the <a href="http://www.playframework.org/documentation/1.0.2.1/secure">Secure module</a>.
</p>

<h2><a>Enable LogiSima Play CAS</a></h2>
<p>
  In the conf/application.conf file, enable the LogiSima Play CAS module with this line :
</p>
<pre>
  <code>
    # The logisima play cas module
    module.logisima-cas=${play.path}/module/logisima-play-cas
    </code>
</pre>

<h2><a>Import default routes</a></h2>
<p>
  In the conf/route file, import the default routes by adding this line :
</p>
<pre>
  <code>
  # Import Secure routes
  *    /    module:logisima-cas
  </code>
</pre>

<h2><a>Module configuration</a></h2>
<h3><a>Configuration for CAS autentification</a></h3>
<p>
  In the conf/application.conf file, you have to specified cas login, validate and logout urls like this :
</p>
<pre>
  <code>
  cas.validateUrl=https://www.logisima.com/cas/serviceValidate
  cas.loginUrl=https://www.logisima.com/cas/loginUrl
  cas.logoutUrl=https://www.logisima.com/cas/logoutUrl
  cas.gateway=false
  </code>
</pre>
<h3><a>Configuration for Proxy CASification</a></h3>
<p>
  In the conf/application.conf file, you have to specified cas.proxyUrl (and optionnaly application.url.ssl) :
</p>
<pre>
  <code>
  cas.proxyUrl=https://www.logisima.com/cas/proxy
  application.url.ssl=https://localhost:8443
  </code>
</pre>
<p>NB: "application.url.ssl" is useful to specify the SSL url of your application. By default, module generate this url with "application.baseUrl" property, and replace http by https</p>

<h2><a>Protect a controller</a></h2>
<p>
  To protect a controller, you just have to add this annotation : @With(SecureCAS.class).
  <br/>
  Exemple:
</p>
<pre>
  <code>
  @With(SecureCAS.class)
  public class Application extends Controller {

      public static void index() {
          render();
      }

  }
  </code>
</pre>

<h2><a>Add authentification mechanisme</a></h2>
<p>
  Once your application retrivied the username (login), you have to check the user's information with your own mechanism. To do this, you just have to create a class in the controllers package that extends the controllers.SecureCAS.Security, and impement the following method :
  <br/>
  public static boolean authentify(String username, String password).
  <br/>
  <br/>
  Exemple :
</p>
<pre>
  <code>
  package controllers;

  public class Security extends SecureCAS.Security {

      public static boolean authenticate(String username, String password) {
          User user = User.find("byEmail", username).first();
          return user != null && user.password.equals(password);
      }

  }
  </code>
</pre>

<h2><a>Retrieving the connected user</a></h2>
<p>In your application, if you want to know who is connected (the username /login), you can call the static method Security.connected().</p>

<h2><a>Retrieving a Proxy Ticket</a></h2>
<p>
  If you have configured the module for proxy-casification, you can retrivied a proxy ticket by calling this static method : CASUtils.getProxyTicket(username, proxyApplicationUrl), where :
  <ul>
    <li><strong>username</strong> is the login of the user</li>
    <li><strong>proxyApplicationUrl</strong> is the url of the proxy application (application to witch you give the PT)
  </ul>
  <br/>
  Exemple :
</p>
<pre>
  <code>
  String myPT = CASUtils.getProxyTicket(Security.connected(), "http://localhost:8080/foo")
  </code>
</pre>